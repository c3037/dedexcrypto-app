// Generated by @wagmi/cli@1.3.0 on 7/16/2023 at 4:12:19 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi';
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Token
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20TokenABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TokenABI}__.
 */
export function useErc20TokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20TokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: erc20TokenABI,
    ...config,
  } as UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20TokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20TokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20TokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20TokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20TokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20TokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20TokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20TokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20TokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"name"`.
 */
export function useErc20TokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20TokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20TokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20TokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20TokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20TokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20TokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20TokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20TokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TokenABI}__.
 */
export function useErc20TokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20TokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20TokenABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof erc20TokenABI, TFunctionName, TMode>({
    abi: erc20TokenABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20TokenApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20TokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20TokenABI, 'approve', TMode> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<typeof erc20TokenABI, 'approve', TMode>({
    abi: erc20TokenABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20TokenTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20TokenABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20TokenABI, 'transfer', TMode> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<typeof erc20TokenABI, 'transfer', TMode>({
    abi: erc20TokenABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TokenTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20TokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20TokenABI, 'transferFrom', TMode> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<typeof erc20TokenABI, 'transferFrom', TMode>({
    abi: erc20TokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TokenABI}__.
 */
export function usePrepareErc20TokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20TokenABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20TokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20TokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20TokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20TokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20TokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20TokenABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20TokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20TokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20TokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20TokenABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20TokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20TokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20TokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20TokenABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20TokenABI}__.
 */
export function useErc20TokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20TokenABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20TokenABI,
    ...config,
  } as UseContractEventConfig<typeof erc20TokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20TokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20TokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20TokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20TokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20TokenABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20TokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20TokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: erc20TokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20TokenABI, 'Transfer'>);
}
